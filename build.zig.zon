.{
    // This is the default name used by packages depending on this one. For
    // example, when a user runs `zig fetch --save <url>`, this field is used
    // as the key in the `dependencies` table. Although the user can choose a
    // different name, most users will stick with this provided value.
    //
    // It is redundant to include "zig" in this name because it is already
    // within the Zig package namespace.
    .name = "zSockets",

    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{
        .boringssl = .{
            .url = "https://github.com/cryptodeal/boringssl-zig/archive/013e07e8bd7e23663749f8af2a0706f0ad24ce60.tar.gz",
            .hash = "12205e5781053aab9353ae3c635500ec4d80b4465ea373bbfdd59eb79a3da7aa9993",
            .lazy = false, // TODO(cryptodeal): this should be lazy
        },
        .openssl = .{
            .url = "https://github.com/kassane/openssl-zig/archive/3c1e4cbc8750a60863d68b0b0d647cb39de7ac4d.tar.gz",
            .hash = "1220eaaaa8cd8d200485950c6b94c3d159ed3e33b4749bc38b9a39f957ec27a75858",
            .lazy = false, // TODO(cryptodeal): this should be lazy
        },
        .wolfssl = .{
            .url = "https://github.com/cryptodeal/wolfssl-zig/archive/b4587e49884efc8288eea5250824e3d230890699.tar.gz",
            .hash = "12203ce2f859a80991aaeff69a322a8087e89c660a9749f6a20aee0419b40ef327c0",
            .lazy = false, // TODO(cryptodeal): this should be lazy
        },
        .asio = .{
            .url = "https://github.com/kassane/asio/archive/65d0da34679fe6ec0e38873a7b2049c449781c15.tar.gz",
            .hash = "1220cc9114d3265ef6cf6e8add23e7c88ebbebb0e6dd12f10b65d27f44bbac420dbb",
            .lazy = false, // TODO(cryptodeal): this should be lazy
        },
        // See `zig fetch --save <url>` for a command-line interface for adding dependencies.
        //.example = .{
        //    // When updating this field to a new URL, be sure to delete the corresponding
        //    // `hash`, otherwise you are communicating that you expect to find the old hash at
        //    // the new URL.
        //    .url = "https://example.com/foo.tar.gz",
        //
        //    // This is computed from the file contents of the directory of files that is
        //    // obtained after fetching `url` and applying the inclusion rules given by
        //    // `paths`.
        //    //
        //    // This field is the source of truth; packages do not come from a `url`; they
        //    // come from a `hash`. `url` is just one of many possible mirrors for how to
        //    // obtain a package matching this `hash`.
        //    //
        //    // Uses the [multihash](https://multiformats.io/multihash/) format.
        //    .hash = "...",
        //
        //    // When this is provided, the package is found in a directory relative to the
        //    // build root. In this case the package's hash is irrelevant and therefore not
        //    // computed. This field and `url` are mutually exclusive.
        //    .path = "foo",

        //    // When this is set to `true`, a package is declared to be lazily
        //    // fetched. This makes the dependency only get fetched if it is
        //    // actually used.
        //    .lazy = false,
        //},
    },

    // Specifies the set of files and directories that are included in this package.
    // Only files and directories listed here are included in the `hash` that
    // is computed for this package. Only files listed here will remain on disk
    // when using the zig package manager. As a rule of thumb, one should list
    // files required for compilation plus any license(s).
    // Paths are relative to the build root. Use the empty string (`""`) to refer to
    // the build root itself.
    // A directory listed here means that all files within, recursively, are included.
    .paths = .{
        "build.zig",
        "build.zig.zon",
        "src",
        "README.md",
    },
}
